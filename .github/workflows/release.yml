name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read
  packages: write

jobs:
  quick-security-check:
    name: Quick Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

  build-and-push:
    name: Build and Push OCI Image
    needs: quick-security-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for typecheck only)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/rogerwesterbo/svennescamping-front
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
            VITE_GOOGLE_CLIENT_SECRET=${{ secrets.VITE_GOOGLE_CLIENT_SECRET }}
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}

  create-chart-package:
    name: Create and Push Helm Chart
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: extract-version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v*}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update chart version and app version
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"

          # Update Chart.yaml
          yq eval ".version = \"$VERSION\" | .appVersion = \"$VERSION\"" -i charts/svennescamping-front/Chart.yaml

          # Update values.yaml to use the new image tag
          yq eval ".image.tag = \"$VERSION\"" -i charts/svennescamping-front/values.yaml

          # Verify changes
          echo "Chart.yaml updated:"
          yq eval '.version, .appVersion' charts/svennescamping-front/Chart.yaml
          echo "values.yaml updated:"
          yq eval '.image.tag' charts/svennescamping-front/values.yaml

      - name: Package Helm chart
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          helm package charts/svennescamping-front

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Helm chart to OCI registry
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          helm push svennescamping-front-${VERSION}.tgz oci://ghcr.io/rogerwesterbo/helm
